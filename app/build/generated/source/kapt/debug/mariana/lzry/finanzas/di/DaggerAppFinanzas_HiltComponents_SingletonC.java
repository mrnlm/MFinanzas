// Generated by Dagger (https://dagger.dev).
package mariana.lzry.finanzas.di;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.lifecycle.ViewModelAssistedFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import mariana.lzry.finanzas.data.database.FinanzasDatabase;
import mariana.lzry.finanzas.data.database.dao.CategoriesDao;
import mariana.lzry.finanzas.data.database.dao.IncomeEntriesReadingDao;
import mariana.lzry.finanzas.data.database.dao.IncomeEntriesWritingDao;
import mariana.lzry.finanzas.data.database.dao.OutcomeEntriesReadingDao;
import mariana.lzry.finanzas.data.database.dao.OutcomeEntriesWritingDao;
import mariana.lzry.finanzas.data.repositories.Repository;
import mariana.lzry.finanzas.domain.usecases.GetCategoriesUseCase;
import mariana.lzry.finanzas.domain.usecases.GetIncomeEntriesUseCase;
import mariana.lzry.finanzas.domain.usecases.GetOutcomeEntriesUseCase;
import mariana.lzry.finanzas.domain.usecases.WriteIncomeEntriesUseCase;
import mariana.lzry.finanzas.domain.usecases.WriteOutcomeEntryUseCase;
import mariana.lzry.finanzas.presentation.controller.DetailsController;
import mariana.lzry.finanzas.presentation.controller.DetailsController_Factory;
import mariana.lzry.finanzas.presentation.controller.DetailsController_MembersInjector;
import mariana.lzry.finanzas.presentation.controller.HomeController;
import mariana.lzry.finanzas.presentation.controller.HomeController_Factory;
import mariana.lzry.finanzas.presentation.controller.HomeController_MembersInjector;
import mariana.lzry.finanzas.presentation.controller.IncomeController;
import mariana.lzry.finanzas.presentation.controller.IncomeController_Factory;
import mariana.lzry.finanzas.presentation.controller.IncomeController_MembersInjector;
import mariana.lzry.finanzas.presentation.controller.LoginController;
import mariana.lzry.finanzas.presentation.controller.OutcomeController;
import mariana.lzry.finanzas.presentation.controller.OutcomeController_Factory;
import mariana.lzry.finanzas.presentation.controller.OutcomeController_MembersInjector;
import mariana.lzry.finanzas.presentation.controller.SettingsController;
import mariana.lzry.finanzas.presentation.controller.SettingsController_Factory;
import mariana.lzry.finanzas.presentation.controller.SettingsController_MembersInjector;
import mariana.lzry.finanzas.presentation.view.MainActivity;
import mariana.lzry.finanzas.presentation.view.details.DetailsFragment;
import mariana.lzry.finanzas.presentation.view.details.DetailsFragment_MembersInjector;
import mariana.lzry.finanzas.presentation.view.home.HomeFragment;
import mariana.lzry.finanzas.presentation.view.home.HomeFragment_MembersInjector;
import mariana.lzry.finanzas.presentation.view.income.IncomeFragment;
import mariana.lzry.finanzas.presentation.view.income.IncomeFragment_MembersInjector;
import mariana.lzry.finanzas.presentation.view.login.LoginActivity;
import mariana.lzry.finanzas.presentation.view.login.LoginActivity_MembersInjector;
import mariana.lzry.finanzas.presentation.view.outcome.OutcomeFragment;
import mariana.lzry.finanzas.presentation.view.outcome.OutcomeFragment_MembersInjector;
import mariana.lzry.finanzas.presentation.view.settings.SettingsFragment;
import mariana.lzry.finanzas.presentation.view.settings.SettingsFragment_MembersInjector;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppFinanzas_HiltComponents_SingletonC extends AppFinanzas_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private volatile Object loginController = new MemoizedSentinel();

  private volatile Object finanzasDatabase = new MemoizedSentinel();

  private volatile Object categoriesDao = new MemoizedSentinel();

  private volatile Object incomeEntriesWritingDao = new MemoizedSentinel();

  private volatile Object incomeEntriesReadingDao = new MemoizedSentinel();

  private volatile Object outcomeEntriesWritingDao = new MemoizedSentinel();

  private volatile Object outcomeEntriesReadingDao = new MemoizedSentinel();

  private volatile Object getIncomeEntriesUseCase = new MemoizedSentinel();

  private volatile Object getOutcomeEntriesUseCase = new MemoizedSentinel();

  private volatile Object detailsController = new MemoizedSentinel();

  private volatile Object homeController = new MemoizedSentinel();

  private volatile Object getCategoriesUseCase = new MemoizedSentinel();

  private volatile Object writeIncomeEntriesUseCase = new MemoizedSentinel();

  private volatile Object incomeController = new MemoizedSentinel();

  private volatile Object writeOutcomeEntryUseCase = new MemoizedSentinel();

  private volatile Object outcomeController = new MemoizedSentinel();

  private volatile Object settingsController = new MemoizedSentinel();

  private DaggerAppFinanzas_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private LoginController loginController() {
    Object local = loginController;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = loginController;
        if (local instanceof MemoizedSentinel) {
          local = new LoginController();
          loginController = DoubleCheck.reentrantCheck(loginController, local);
        }
      }
    }
    return (LoginController) local;
  }

  private FinanzasDatabase finanzasDatabase() {
    Object local = finanzasDatabase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = finanzasDatabase;
        if (local instanceof MemoizedSentinel) {
          local = RoomModule_ProvideRoomFactory.provideRoom(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          finanzasDatabase = DoubleCheck.reentrantCheck(finanzasDatabase, local);
        }
      }
    }
    return (FinanzasDatabase) local;
  }

  private CategoriesDao categoriesDao() {
    Object local = categoriesDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = categoriesDao;
        if (local instanceof MemoizedSentinel) {
          local = RoomModule_ProvideIncomeCategoriesDaoFactory.provideIncomeCategoriesDao(finanzasDatabase());
          categoriesDao = DoubleCheck.reentrantCheck(categoriesDao, local);
        }
      }
    }
    return (CategoriesDao) local;
  }

  private IncomeEntriesWritingDao incomeEntriesWritingDao() {
    Object local = incomeEntriesWritingDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = incomeEntriesWritingDao;
        if (local instanceof MemoizedSentinel) {
          local = RoomModule_ProvideIncomeEntityDaoFactory.provideIncomeEntityDao(finanzasDatabase());
          incomeEntriesWritingDao = DoubleCheck.reentrantCheck(incomeEntriesWritingDao, local);
        }
      }
    }
    return (IncomeEntriesWritingDao) local;
  }

  private IncomeEntriesReadingDao incomeEntriesReadingDao() {
    Object local = incomeEntriesReadingDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = incomeEntriesReadingDao;
        if (local instanceof MemoizedSentinel) {
          local = RoomModule_ProvidegetIncomeEntityDaoFactory.providegetIncomeEntityDao(finanzasDatabase());
          incomeEntriesReadingDao = DoubleCheck.reentrantCheck(incomeEntriesReadingDao, local);
        }
      }
    }
    return (IncomeEntriesReadingDao) local;
  }

  private OutcomeEntriesWritingDao outcomeEntriesWritingDao() {
    Object local = outcomeEntriesWritingDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = outcomeEntriesWritingDao;
        if (local instanceof MemoizedSentinel) {
          local = RoomModule_ProvideWriteOutcomeEntityDaoFactory.provideWriteOutcomeEntityDao(finanzasDatabase());
          outcomeEntriesWritingDao = DoubleCheck.reentrantCheck(outcomeEntriesWritingDao, local);
        }
      }
    }
    return (OutcomeEntriesWritingDao) local;
  }

  private OutcomeEntriesReadingDao outcomeEntriesReadingDao() {
    Object local = outcomeEntriesReadingDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = outcomeEntriesReadingDao;
        if (local instanceof MemoizedSentinel) {
          local = RoomModule_ProvideReadOutcomeEntityDaoFactory.provideReadOutcomeEntityDao(finanzasDatabase());
          outcomeEntriesReadingDao = DoubleCheck.reentrantCheck(outcomeEntriesReadingDao, local);
        }
      }
    }
    return (OutcomeEntriesReadingDao) local;
  }

  private Repository repository() {
    return new Repository(categoriesDao(), incomeEntriesWritingDao(), incomeEntriesReadingDao(), outcomeEntriesWritingDao(), outcomeEntriesReadingDao());
  }

  private GetIncomeEntriesUseCase getIncomeEntriesUseCase() {
    Object local = getIncomeEntriesUseCase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = getIncomeEntriesUseCase;
        if (local instanceof MemoizedSentinel) {
          local = new GetIncomeEntriesUseCase(repository());
          getIncomeEntriesUseCase = DoubleCheck.reentrantCheck(getIncomeEntriesUseCase, local);
        }
      }
    }
    return (GetIncomeEntriesUseCase) local;
  }

  private GetOutcomeEntriesUseCase getOutcomeEntriesUseCase() {
    Object local = getOutcomeEntriesUseCase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = getOutcomeEntriesUseCase;
        if (local instanceof MemoizedSentinel) {
          local = new GetOutcomeEntriesUseCase(repository());
          getOutcomeEntriesUseCase = DoubleCheck.reentrantCheck(getOutcomeEntriesUseCase, local);
        }
      }
    }
    return (GetOutcomeEntriesUseCase) local;
  }

  private DetailsController detailsController() {
    Object local = detailsController;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = detailsController;
        if (local instanceof MemoizedSentinel) {
          local = injectDetailsController(DetailsController_Factory.newInstance());
          detailsController = DoubleCheck.reentrantCheck(detailsController, local);
        }
      }
    }
    return (DetailsController) local;
  }

  private HomeController homeController() {
    Object local = homeController;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = homeController;
        if (local instanceof MemoizedSentinel) {
          local = injectHomeController(HomeController_Factory.newInstance());
          homeController = DoubleCheck.reentrantCheck(homeController, local);
        }
      }
    }
    return (HomeController) local;
  }

  private GetCategoriesUseCase getCategoriesUseCase() {
    Object local = getCategoriesUseCase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = getCategoriesUseCase;
        if (local instanceof MemoizedSentinel) {
          local = new GetCategoriesUseCase(repository());
          getCategoriesUseCase = DoubleCheck.reentrantCheck(getCategoriesUseCase, local);
        }
      }
    }
    return (GetCategoriesUseCase) local;
  }

  private WriteIncomeEntriesUseCase writeIncomeEntriesUseCase() {
    Object local = writeIncomeEntriesUseCase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = writeIncomeEntriesUseCase;
        if (local instanceof MemoizedSentinel) {
          local = new WriteIncomeEntriesUseCase(repository());
          writeIncomeEntriesUseCase = DoubleCheck.reentrantCheck(writeIncomeEntriesUseCase, local);
        }
      }
    }
    return (WriteIncomeEntriesUseCase) local;
  }

  private IncomeController incomeController() {
    Object local = incomeController;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = incomeController;
        if (local instanceof MemoizedSentinel) {
          local = injectIncomeController(IncomeController_Factory.newInstance());
          incomeController = DoubleCheck.reentrantCheck(incomeController, local);
        }
      }
    }
    return (IncomeController) local;
  }

  private WriteOutcomeEntryUseCase writeOutcomeEntryUseCase() {
    Object local = writeOutcomeEntryUseCase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = writeOutcomeEntryUseCase;
        if (local instanceof MemoizedSentinel) {
          local = new WriteOutcomeEntryUseCase(repository());
          writeOutcomeEntryUseCase = DoubleCheck.reentrantCheck(writeOutcomeEntryUseCase, local);
        }
      }
    }
    return (WriteOutcomeEntryUseCase) local;
  }

  private OutcomeController outcomeController() {
    Object local = outcomeController;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = outcomeController;
        if (local instanceof MemoizedSentinel) {
          local = injectOutcomeController(OutcomeController_Factory.newInstance());
          outcomeController = DoubleCheck.reentrantCheck(outcomeController, local);
        }
      }
    }
    return (OutcomeController) local;
  }

  private SettingsController settingsController() {
    Object local = settingsController;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = settingsController;
        if (local instanceof MemoizedSentinel) {
          local = injectSettingsController(SettingsController_Factory.newInstance());
          settingsController = DoubleCheck.reentrantCheck(settingsController, local);
        }
      }
    }
    return (SettingsController) local;
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  @Override
  public void injectAppFinanzas(AppFinanzas appFinanzas) {
  }

  private DetailsController injectDetailsController(DetailsController instance) {
    DetailsController_MembersInjector.injectGetIncomeEntriesUseCase(instance, getIncomeEntriesUseCase());
    DetailsController_MembersInjector.injectGetOutcomeEntriesUseCase(instance, getOutcomeEntriesUseCase());
    return instance;
  }

  private HomeController injectHomeController(HomeController instance) {
    HomeController_MembersInjector.injectGetIncomeEntriesUseCase(instance, getIncomeEntriesUseCase());
    HomeController_MembersInjector.injectGetOutcomeEntriesUseCase(instance, getOutcomeEntriesUseCase());
    return instance;
  }

  private IncomeController injectIncomeController(IncomeController instance) {
    IncomeController_MembersInjector.injectGetCategoriesUseCase(instance, getCategoriesUseCase());
    IncomeController_MembersInjector.injectWriteIncomeEntriesUseCase(instance, writeIncomeEntriesUseCase());
    return instance;
  }

  private OutcomeController injectOutcomeController(OutcomeController instance) {
    OutcomeController_MembersInjector.injectGetCategoriesUseCase(instance, getCategoriesUseCase());
    OutcomeController_MembersInjector.injectWriteOutcomeEntryUseCase(instance, writeOutcomeEntryUseCase());
    return instance;
  }

  private SettingsController injectSettingsController(SettingsController instance) {
    SettingsController_MembersInjector.injectGetCategoriesUseCase(instance, getCategoriesUseCase());
    return instance;
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder roomModule(RoomModule roomModule) {
      Preconditions.checkNotNull(roomModule);
      return this;
    }

    public AppFinanzas_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerAppFinanzas_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements AppFinanzas_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public AppFinanzas_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends AppFinanzas_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements AppFinanzas_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public AppFinanzas_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends AppFinanzas_HiltComponents.ActivityC {
      private final Activity activity;

      private ActivityCImpl(Activity activityParam) {
        this.activity = activityParam;
      }

      private ViewModelProvider.Factory provideFactory() {
        return ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory.provideFactory(activity, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppFinanzas_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>emptyMap());
      }

      private Set<ViewModelProvider.Factory> defaultActivityViewModelFactorySetOfViewModelProviderFactory(
          ) {
        return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppFinanzas_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(), defaultActivityViewModelFactorySetOfViewModelProviderFactory(), Collections.<ViewModelProvider.Factory>emptySet());
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public void injectLoginActivity(LoginActivity loginActivity) {
        injectLoginActivity2(loginActivity);
      }

      private LoginActivity injectLoginActivity2(LoginActivity instance) {
        LoginActivity_MembersInjector.injectLoginController(instance, DaggerAppFinanzas_HiltComponents_SingletonC.this.loginController());
        return instance;
      }

      private final class FragmentCBuilder implements AppFinanzas_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public AppFinanzas_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCImpl(fragment);
        }
      }

      private final class FragmentCImpl extends AppFinanzas_HiltComponents.FragmentC {
        private final Fragment fragment;

        private FragmentCImpl(Fragment fragmentParam) {
          this.fragment = fragmentParam;
        }

        private ViewModelProvider.Factory provideFactory() {
          return ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory.provideFactory(fragment, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppFinanzas_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>emptyMap());
        }

        private Set<ViewModelProvider.Factory> defaultFragmentViewModelFactorySetOfViewModelProviderFactory(
            ) {
          return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppFinanzas_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(), ActivityCImpl.this.defaultActivityViewModelFactorySetOfViewModelProviderFactory(), defaultFragmentViewModelFactorySetOfViewModelProviderFactory());
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        @Override
        public void injectDetailsFragment(DetailsFragment detailsFragment) {
          injectDetailsFragment2(detailsFragment);
        }

        @Override
        public void injectHomeFragment(HomeFragment homeFragment) {
          injectHomeFragment2(homeFragment);
        }

        @Override
        public void injectIncomeFragment(IncomeFragment incomeFragment) {
          injectIncomeFragment2(incomeFragment);
        }

        @Override
        public void injectOutcomeFragment(OutcomeFragment outcomeFragment) {
          injectOutcomeFragment2(outcomeFragment);
        }

        @Override
        public void injectSettingsFragment(SettingsFragment settingsFragment) {
          injectSettingsFragment2(settingsFragment);
        }

        private DetailsFragment injectDetailsFragment2(DetailsFragment instance) {
          DetailsFragment_MembersInjector.injectDetailsController(instance, DaggerAppFinanzas_HiltComponents_SingletonC.this.detailsController());
          return instance;
        }

        private HomeFragment injectHomeFragment2(HomeFragment instance) {
          HomeFragment_MembersInjector.injectHomeController(instance, DaggerAppFinanzas_HiltComponents_SingletonC.this.homeController());
          return instance;
        }

        private IncomeFragment injectIncomeFragment2(IncomeFragment instance) {
          IncomeFragment_MembersInjector.injectIncomeController(instance, DaggerAppFinanzas_HiltComponents_SingletonC.this.incomeController());
          return instance;
        }

        private OutcomeFragment injectOutcomeFragment2(OutcomeFragment instance) {
          OutcomeFragment_MembersInjector.injectOutcomeController(instance, DaggerAppFinanzas_HiltComponents_SingletonC.this.outcomeController());
          return instance;
        }

        private SettingsFragment injectSettingsFragment2(SettingsFragment instance) {
          SettingsFragment_MembersInjector.injectSettingsController(instance, DaggerAppFinanzas_HiltComponents_SingletonC.this.settingsController());
          return instance;
        }

        private final class ViewWithFragmentCBuilder implements AppFinanzas_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public AppFinanzas_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCImpl(view);
          }
        }

        private final class ViewWithFragmentCImpl extends AppFinanzas_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCImpl(View view) {

          }
        }
      }

      private final class ViewCBuilder implements AppFinanzas_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public AppFinanzas_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCImpl(view);
        }
      }

      private final class ViewCImpl extends AppFinanzas_HiltComponents.ViewC {
        private ViewCImpl(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements AppFinanzas_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public AppFinanzas_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends AppFinanzas_HiltComponents.ViewModelC {
      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>emptyMap();
      }
    }
  }

  private final class ServiceCBuilder implements AppFinanzas_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public AppFinanzas_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends AppFinanzas_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
