// Generated by Dagger (https://dagger.dev).
package mariana.lzry.finanzas.presentation.controller;

import dagger.internal.Factory;
import javax.inject.Provider;
import mariana.lzry.finanzas.domain.usecases.GetCategoriesUseCase;
import mariana.lzry.finanzas.domain.usecases.WriteOutcomeEntryUseCase;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OutcomeController_Factory implements Factory<OutcomeController> {
  private final Provider<GetCategoriesUseCase> getCategoriesUseCaseProvider;

  private final Provider<WriteOutcomeEntryUseCase> writeOutcomeEntryUseCaseProvider;

  public OutcomeController_Factory(Provider<GetCategoriesUseCase> getCategoriesUseCaseProvider,
      Provider<WriteOutcomeEntryUseCase> writeOutcomeEntryUseCaseProvider) {
    this.getCategoriesUseCaseProvider = getCategoriesUseCaseProvider;
    this.writeOutcomeEntryUseCaseProvider = writeOutcomeEntryUseCaseProvider;
  }

  @Override
  public OutcomeController get() {
    OutcomeController instance = newInstance();
    OutcomeController_MembersInjector.injectGetCategoriesUseCase(instance, getCategoriesUseCaseProvider.get());
    OutcomeController_MembersInjector.injectWriteOutcomeEntryUseCase(instance, writeOutcomeEntryUseCaseProvider.get());
    return instance;
  }

  public static OutcomeController_Factory create(
      Provider<GetCategoriesUseCase> getCategoriesUseCaseProvider,
      Provider<WriteOutcomeEntryUseCase> writeOutcomeEntryUseCaseProvider) {
    return new OutcomeController_Factory(getCategoriesUseCaseProvider, writeOutcomeEntryUseCaseProvider);
  }

  public static OutcomeController newInstance() {
    return new OutcomeController();
  }
}
